$atomy-bindings = #[
  default: binding
]

module(Doodle::Styles::Atomy):
  sub-style(Doodle::Styles::Code)

  _atomy(code) :=
    _highlight("Atomy", code)

  _interaction(code, where = "default") := do:
    name = string(where) to-sym
    bnd = nil
    -- TODO: broken
    if($atomy-bindings has-key?(name))
      then: bnd =! $atomy-bindings fetch(name)
      else: bnd =! $atomy-bindings at(name) put(binding)

    binding = $atomy-bindings
    pre interaction:
      string(code) each-line (l):
        span caret: text("> ")

        l sub!(r{\n*$}, "\n")
        _highlight-inline("Atomy", l)

        res = Atomy::Compiler evaluate(l, bnd)
        _highlight-inline("Atomy", res pretty render)

        text("\n")

  _example(code, where = "default") := do:
    div example:
      em("Example:")
      _interaction(code, where)

  _define(thumb, description = nil) := do:
    (signature . rest) = string(thumb) split("\n")
    result = rest pop sub(r{&gt; }, "")
    specs = rest collect (s): s sub(r{\| }, "")

    meth = Atomy::Parser parse-string(signature) nodes first
    name = meth method-name
    url = definition-url(meth method-name)

    @doc tags at(name) put([
      Doodle::Builder inline:
        span title:
          code:
            a(#[href: url]): text(name)
      url
    ])

    div(#[id: "definition_" + meth method-name]) definition:
      pre thumb:
        _highlight-inline("Atomy", signature)

        text(" ")

        span definition-result-arrow:
          cdata("&rArr;")

        text(" ")

        _highlight-inline("Atomy", result)

        specs each (s):
          text("\n  | ")
          _highlight-inline("Atomy", s)

      when(description):
        build(description)

  auto-link?("o") := true

  definition-url(name) :=
    @doc url sub(r{#.*$}, "") + "#definition_" + name
