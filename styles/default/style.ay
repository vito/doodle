module(Doodle::Styles):
  module(Default):
    _header := do:
      title = doc title
      send("h" + (doc depth + 1) to-s) section-header:
        build(title)

    _section-reference(tag) :=
      unless(doc toc?):
        sec = doc down
                select (d): d tag == tag value;
                first at-css("body .section")
        sec at("id") put("section_" + tag value)
        insert(sec)

    _table-of-contents :=
      ol toc table-of-contents!

    class(<< self):
      define(post-process(document)):
        when(document title):
          document at-css("head title") inner-html =
            Doodle::Builder run-strip(document title)

        Doodle::Builder with(document at("head")):
          link(#[
            #rel -> "stylesheet"
            #type -> "text/css"
            #href -> "public/doodle.css"
          ])

          ["jquery", "jquery.hotkeys", "tags", "main"] each (js):
            script(#[
              type: "text/javascript"
              src: "public/" + js + ".js"
            ])

        Doodle::Builder with(document at("body")):
          div search:
            form(#[action: "javascript:void(0)"]):
              input(#[type: "text"; placeholder: "Searchâ€¦"]) search!

            ul search-results

          div sidebar!:
            Doodle::Styles::Default table-of-contents(self)

        toc = document at-css("#table_of_contents")

        when(toc):
          Doodle::Builder with(toc):
            @doc down each (d):
              toc-leaf(self, d)

        document css("#content") wrap("<div id=\"main\"></div>")

      pre-save(_, out) := do:
        public = File expand-path("../public", _FILE)
        Dir glob(public + "/*") each (f):
          FileUtils cp(f, out + "/public")

      scan(doc, (#title . as)) := do:
        [title, tag] =
          as match:
            [x] -> [x, x]
            _ -> as first(2)

        doc title = title
        doc tag = Doodle::Builder run-sanitize(tag)
        [#header]

      scan(doc, [#include-section, where]) := do:
        path = Doodle::Builder run-inline(where)
        tree = Doodle::Parser parse-file(path)

        sub = Doodle::Builder new
        sub doc tree = sub scan(tree)

        sub doc up = doc
        doc down << sub doc

        [#section-reference, sub doc tag]

      scan(doc, (#section . as)) := do:
        [title, tag, body] =
          as match:
            [t, b] -> [t, t, b]
            _ -> as take(3)

        sub = Doodle::Builder new
        sub doc title = title
        sub doc tag = Doodle::Builder run-sanitize(tag)

        body nodes unshift(Doodle::AST::Send new(0, "header", []))
        sub doc tree = sub scan(body)

        sub doc up = doc
        doc down << sub doc

        [#section-reference, sub doc tag]

      scan(doc, [#table-of-contents]) := do:
        doc toc? = true
        [#table-of-contents]

      scan(_, x) := x

      define(table-of-contents(b)):
        unless(b doc down empty?):
          b h4("On this page:")

          b ol toc (b):
            b doc down each (s):
              toc-leaf(b, s)

        when(b doc up):
          b h4("Up one level:")
          b ol toc (b):
            toc-leaf(b, b doc up)

      define(toc-leaf(b, d)):
        b li (b):
          b a(#[href: d url]):
            b build(d title)

          unless(d down empty?):
            b ol (b):
              d down each (s):
                toc-leaf(b, s)


-- reopen, and add #top? with TOC semantics
class(Doodle::Document):
  attr-accessor(#toc?)

  top? := @up nil? || @up toc?
