module(Anatomy::AutoFlow):
  class(<< self):
    flow?(x) := x description inline?
    flow?(x: Nokogiri::XML::Text) :=
      !(paragraphs?(x content))

    split?(_) := false
    split?(x: Nokogiri::XML::Text) :=
      paragraphs?(x content)

    paragraphs?(str) := str include?("\n\n")

    empty?(p) :=
      p children empty? || p children all? (p):
        p match:
          Nokogiri::XML::Text ->
            p content strip empty?

          _ ->
            false

    p-able?(doc) :=
      doc description nil? ||
        doc description sub-elements include?("p")

    define(flow(doc)):
      para = nil
      doc children each (c):
        condition:
          -- can't contain <p>; just recurse
          !(p-able?(doc)) ->
            flow(c)

          -- flowable; add to current paragraph
          flow?(c) && para -> do:
            c parent = para

          -- flowable; start a new paragraph
          flow?(c) -> do:
            para =! Nokogiri::XML::Element new("p", doc)
            c parent = para

          -- chunk of text containing multiple paragraphs
          split?(c) -> do:
            c content each-line("") (p):
              para ||= Nokogiri::XML::Element new("p", doc)
              para << p sub(r{\n\n*$}, "")
              when(p suffix?("\n\n")):
                unless(empty?(para)):
                  c before(para)

                para =! nil

            c remove

          -- hit a block element; finish <p>, recurse
          para -> do:
            unless(empty?(para)):
              c before(para)

            para =! nil

            flow(c)

          -- hit a block element; recurse
          otherwise ->
            flow(c)

      -- ended while still adding para; finish him!
      when(para && !(empty?(para))):
        doc << para

      doc
