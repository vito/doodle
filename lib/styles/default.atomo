module(Anatomy::Styles):
  module(Default):
    : self ; apply(document) := do:
      when(document title):
        document at-css("head title") inner-html =
          Anatomy::Builder run-strip(document title)

      Anatomy::Builder with(document at("head")):
        link(#[
          #rel -> "stylesheet"
          #type -> "text/css"
          #href -> "public/anatomy.css"
        ])

      Anatomy::Builder with(document at("body")):
        div sidebar!:
          table-of-contents

      toc = document at-css("#table_of_contents")

      document xpath(".//anatomy_section") each (r):
        if(toc)
          then:
            r remove
          else:
            sub = document down fetch(r inner-html)
            r replace(section(sub))

      when(toc):
        Anatomy::Builder with(toc):
          @doc down each-value (d):
            toc-leaf(d)

    : self ; section(document) :=
      document at-css("body .section") tap (s):
        s at("id") put("section_" + document tag)

    : self ; extend-object(markup) := do:
      class(<< markup):
        title(title, tag = title) := do:
          builder doc title = title
          builder doc tag = Anatomy::Builder run-sanitize(tag)
          header

        section(title, tag-or-body, body = nil) := do:
          tag = Anatomy::Builder run-sanitize(
            if(body nil?)
              then: title
              else: tag-or-body
          )

          body ||= tag-or-body

          sub = Anatomy::Builder run(body) (doc, sub-builder):
            doc up = builder doc
            doc title = title
            doc tag = tag

            sub-builder header

          builder doc down at(tag) put(sub)

          anatomy-section: text(tag)

        include-section(path) := do:
          path = Anatomy::Builder run-inline(path)
          tree = Anatomy::Parser parse-file(path)

          sub = Anatomy::Builder run(tree) (doc):
            doc up = builder doc

          builder doc down at(sub tag) put(sub)

          anatomy-section: text(sub tag)

        table-of-contents := do:
          builder doc toc? = true
          ol toc table-of-contents!

      class(<< markup builder):
        attr-accessor(#toc)

        header :=
          send("h" + (@doc depth + 1) to-s) section-header:
            build(@doc title)

        define(table-of-contents):
          unless(@doc down empty?):
            h4("On this page:")

            ol toc:
              @doc down each-value (s):
                toc-leaf(s)

          when(@doc up):
            h4("Up one level:")
            ol toc:
              toc-leaf(@doc up)

        define(toc-leaf(d)):
          li:
            a(#[href: d url]):
              build(d title)

          unless(d down empty?):
            ol:
              d down each-value (s):
                toc-leaf(s)

-- reopen, and add a new #url with TOC semantics
class(Anatomy::Document):
  attr-accessor(#toc?)

  url :=
    if(depth == 0 || @up toc?)
      then: tag + ".html"
      else: @up url sub(r{#[^$]+$}, "") + "#section_" + @tag
