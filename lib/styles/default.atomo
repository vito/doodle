module(Anatomy::Styles):
  module(Default):
    header := do:
      title = builder doc title
      send("h" + (builder doc depth + 1) to-s) section-header:
        build(title)

    section-reference(tag) :=
      unless(builder doc toc?):
        tag = Anatomy::Builder run-inline(tag)
        sec = builder doc down fetch(tag) at-css("body .section")
        sec at("id") put("section_" + tag)
        insert(sec)

    table-of-contents :=
      ol toc table-of-contents!

    class(<< self):
      define(apply(document)):
        when(document title):
          document at-css("head title") inner-html =
            Anatomy::Builder run-strip(document title)

        Anatomy::Builder with(document at("head")):
          link(#[
            #rel -> "stylesheet"
            #type -> "text/css"
            #href -> "public/anatomy.css"
          ])

        Anatomy::Builder with(document at("body")):
          div sidebar!:
            table-of-contents

        toc = document at-css("#table_of_contents")

        when(toc):
          Anatomy::Builder with(toc):
            @doc down each-value (d):
              toc-leaf(d)

      scan(doc, msg, args) :=
        [msg, args] match:
          [#title, [title, tag]] -> do:
            doc title = title
            doc tag = Anatomy::Builder run-sanitize(tag)
            [#header]

          [#title, [title]] -> do:
            doc title = title
            doc tag = Anatomy::Builder run-sanitize(title)
            [#header]

          [#include-section, [path]] -> do:
            path = Anatomy::Builder run-inline(path)
            tree = Anatomy::Parser parse-file(path)

            sub = Anatomy::Builder new
            sub doc tree = sub scan(tree)

            sub doc up = doc
            doc down at(sub doc tag) put(sub doc)

            [#section-reference, sub doc tag]

          [#section, [title, body]] -> do:
            sub = Anatomy::Builder new
            sub doc title = title
            sub doc tag = Anatomy::Builder run-sanitize(title)

            body nodes unshift(Anatomy::AST::Send new(0, "header", []))
            sub doc tree = sub scan(body)

            sub doc up = doc
            doc down at(sub doc tag) put(sub doc)

            [#section-reference, sub doc tag]

          [#section, [title, tag, body]] -> do:
            sub = Anatomy::Builder new
            sub doc title = title
            sub doc tag = Anatomy::Builder run-sanitize(tag)

            body nodes unshift(Anatomy::AST::Send new(0, "header", []))
            sub doc tree = sub scan(body)

            sub doc up = doc
            doc down at(sub doc tag) put(sub doc)

            [#section-reference, sub doc tag]

          [#table-of-contents, _] -> do:
            doc toc? = true
            [#table-of-contents]

          _ -> [msg] + args

      section(document) :=
        document at-css("body .section") tap (s):
          s at("id") put("section_" + document tag)

      define(extend-object(markup)):
        -- TODO: super doesn't work in a block apparently?
        super

        class(<< markup builder):
          attr-accessor(#toc)

          define(table-of-contents):
            unless(@doc down empty?):
              h4("On this page:")

              ol toc:
                @doc down each-value (s):
                  toc-leaf(s)

            when(@doc up):
              h4("Up one level:")
              ol toc:
                toc-leaf(@doc up)

          define(toc-leaf(d)):
            li:
              a(#[href: d url]):
                build(d title)

              unless(d down empty?):
                ol:
                  d down each-value (s):
                    toc-leaf(s)

-- reopen, and add #standalone? with TOC semantics
class(Anatomy::Document):
  attr-accessor(#toc?)

  top? := @up nil? || @up toc?
