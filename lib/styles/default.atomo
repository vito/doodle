module(Anatomy::Styles):
  module(Default):
    header := do:
      title = builder doc title
      send("h" + (builder doc depth + 1) to-s) section-header:
        build(title)

    section-reference(tag) :=
      unless(builder doc toc?):
        sec = builder doc down fetch(tag value) at-css("body .section")
        sec at("id") put("section_" + tag value)
        insert(sec)

    table-of-contents :=
      ol toc table-of-contents!

    class(<< self):
      define(post-process(document)):
        when(document title):
          document at-css("head title") inner-html =
            Anatomy::Builder run-strip(document title)

        Anatomy::Builder with(document at("head")):
          link(#[
            #rel -> "stylesheet"
            #type -> "text/css"
            #href -> "public/anatomy.css"
          ])

          ["jquery", "jquery.hotkeys", "tags", "main"] each (js):
            script(#[
              type: "text/javascript"
              src: "public/" + js + ".js"
            ])

        Anatomy::Builder with(document at("body")):
          div sidebar!:
            Anatomy::Styles::Default table-of-contents(self)

        toc = document at-css("#table_of_contents")

        when(toc):
          Anatomy::Builder with(toc):
            @doc down each-value (d):
              toc-leaf(self, d)

      scan(doc, (#title . as)) := do:
        [title, tag] =
          as match:
            [x] -> [x, x]
            _ -> as first(2)

        doc title = title
        doc tag = Anatomy::Builder run-sanitize(tag)
        [#header]

      scan(doc, [#include-section, where]) := do:
        path = Anatomy::Builder run-inline(where)
        tree = Anatomy::Parser parse-file(path)

        sub = Anatomy::Builder new
        sub doc tree = sub scan(tree)

        sub doc up = doc
        doc down at(sub doc tag) put(sub doc)

        [#section-reference, sub doc tag]

      scan(doc, (#section . as)) := do:
        [title, tag, body] =
          as match:
            [t, b] -> [t, t, b]
            _ -> as take(3)

        sub = Anatomy::Builder new
        sub doc title = title
        sub doc tag = Anatomy::Builder run-sanitize(tag)

        body nodes unshift(Anatomy::AST::Send new(0, "header", []))
        sub doc tree = sub scan(body)

        sub doc up = doc
        doc down at(sub doc tag) put(sub doc)

        [#section-reference, sub doc tag]

      scan(doc, [#table-of-contents]) := do:
        doc toc? = true
        [#table-of-contents]

      scan(_, x) := x

      define(table-of-contents(b)):
        unless(b doc down empty?):
          b h4("On this page:")

          b ol toc (b):
            b doc down each-value (s):
              toc-leaf(b, s)

        when(b doc up):
          b h4("Up one level:")
          b ol toc (b):
            toc-leaf(b, b doc up)

      define(toc-leaf(b, d)):
        b li (b):
          b a(#[href: d url]):
            b build(d title)

          unless(d down empty?):
            b ol (b):
              d down each-value (s):
                toc-leaf(b, s)


-- reopen, and add #top? with TOC semantics
class(Anatomy::Document):
  attr-accessor(#toc?)

  top? := @up nil? || @up toc?
