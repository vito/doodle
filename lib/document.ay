class(Doodle::Document < Nokogiri::HTML::Document):
  attr-accessor(#title, #tag, #tags, #styles, #up, #down, #tree)

  define(initialize(@title = nil, @tag = "", @tree = nil)):
    super

    @tags = #[] -- tag => [pretty, url]
    @up = nil
    @down = []

  top? := @up nil?

  define(depth):
    d = 0
    p = self

    until(p top?):
      d += 1
      p =! p up

    d

  url :=
    if(top?)
      then: @tag + ".html"
      else: @up url sub(r"#.*$", "") + "#section_" + @tag

  save-to(where) := do:
    when(top?):
      File open(where + "/" + @tag + ".html", "w")
           write(to-html)

    @down each [s]:
      s save-to(where)

  define(tag-url(tag, up? = true)):
    if(@tags has-key?(tag))
      then: @tags fetch(tag) at(1)
      else:
        @down each [d]:
          when(res = d tag-url(tag, false)):
            return(res)

        when(up? && @up):
          (@up down - [self]) each [d]:
            when(res = d tag-url(tag)):
              return(res)

        nil

  define(search-tags):
    title = @title
    tag = @tag

    search-title = Doodle::Builder run-strip(@title)
    url = url

    tags = [
      [ search-title
        Doodle::Builder inline:
          span title:
            a(#[href: url]): build(title)
        url
      ]
      [ @tag
        Doodle::Builder inline:
          span tag:
            text("tag: ")
            code:
              a(#[href: url]): text(tag)
        url
      ]
    ]

    @tags each-pair [k, v]:
      tags << [k] + v

    @down each [d]:
      sts = d search-tags

      sts each [t]:
        unless(t at(1) at-css(".parent")):
          Doodle::Builder with(t at(1)):
            span parent:
              text(" in ")
              a(#[href: url]): build(title)

      tags += sts

    tags
