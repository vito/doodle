%% {
    def trim_leading(str, n)
      return str unless n > 0
      str.gsub!(/\n {0,#{n.to_s}}/, "\n")
    end
}
           line = { current_line }
         column = { current_column }

    ident_start = < /[a-z_]/ > { text }
  ident_letters = < /([[:alnum:]\$\+\<=\>\^~!@#%&*\-.\/\?])*/ > { text }

     identifier = < ident_start ident_letters > { text.tr("-", "_") }

        comment = "{-" in_multi
       in_multi = /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ "{-" in_multi /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ /[-{}]/ in_multi

     content(s) = comment? (chunk(s) | escaped):c comment? { c }

       chunk(s) = line:l ((< /[^\\\{\}]/+ > | "\\" < /[\\\{\}]/ >) { text })+:chunk (&"}" | comment)?:c
                    { text = chunk.join
                      text.rstrip! if c
                      trim_leading(text, s)
                      Doodle::AST::Chunk.new(l, text)
                    }
                | nested

        escaped = line:l "\\" identifier:n argument*:as
                    { Doodle::AST::Send.new(l, n, as) }

        leading = &(/\n+/ column:b /\s+/ column:a) { a - b }
                | { 0 }

         nested = line:l "{" leading:s content(s)*:cs "}"
                    { case cs[0]
                      when Doodle::AST::Chunk
                        cs[0].content.sub!(/^\n/, "")
                      end

                      Doodle::AST::Tree.new(l, cs)
                    }

       argument = nested

           root = line:l content(0)*:cs !.
                    { Doodle::AST::Tree.new(l, cs) }
