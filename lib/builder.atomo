class(Anatomy::Builder < Nokogiri::HTML::Builder):
  define(initialize):
    super

    @markup = Anatomy::Markup new(self)

    @doc styles each (m):
      @markup extend(m)

  define(run(t, flow? = true)):
    html:
      head:
        title: text("Untitled")

      body: build(t)

    when(flow?):
      Anatomy::AutoFlow flow(doc)

    doc apply-styles

  define(run-section(t, name, tag)):
    div section(#(: #id -> "section_" + tag)):
      h2 section-header: build(name)
      build(t)

    Anatomy::AutoFlow flow(doc)

    doc apply-styles

  subrender(t, flow? = false) :=
    class new run(t, flow?) at-css("body") inner-html

  build(t: Anatomy::AST::Tree) :=
    t nodes each (n): build(n)

  build(c: Anatomy::AST::Chunk) :=
    text(c content)

  build(s: Anatomy::AST::Send) :=
    if(@markup respond-to?(s message))
      then: @markup send(s message, *(s arguments))
      else:
        raise(
          NoMethodError new(
            "unknown document message `" + s message +
              "' at line " + s line to-s
            s message
            *(s arguments)
          )
        )

  : self ; strip-tags(str) :=
    Nokogiri::XML::DocumentFragment parse(str) tap (x):
      x traverse (node):
        when(node is-a?(Nokogiri::XML::Element)):
          node replace(
            Nokogiri::XML::Text new(
              node inner-html
              node document
            )
          )

  : self ; sanitize(str) :=
    strip-tags(str) to-html
      gsub(r{[A-Z.]}, ".\\0")
      gsub(r{[^[:alnum:]_\-:.]}, "_")
