class(Anatomy::Builder < Nokogiri::HTML::Builder):
  define(initialize):
    super

    @markup = Anatomy::Markup new(self)

    @doc styles each (m):
      @markup extend(m)

  build(t: Anatomy::AST::Tree) :=
    t nodes each (n): build(n)

  build(c: Anatomy::AST::Chunk) :=
    text(c content)

  build(s: Anatomy::AST::Send) :=
    if(@markup respond-to?(s message))
      then: @markup send(s message, *(s arguments))
      else:
        raise(
          NoMethodError new(
            "unknown document message `" + s message +
              "' at line " + s line to-s
            s message
            *(s arguments)
          )
        )

  class(<< self):
    define(run(t, flow? = true)):
      b = Anatomy::Builder new

      b html:
          head:
            title: text("Untitled")

          body: build(t)

      when(flow?):
        Anatomy::AutoFlow flow(b doc)

      b doc apply-styles

    define(run-inline(node)):
      b = Anatomy::Builder new
      b body: build(node)
      b doc apply-styles at-css("body") inner-html

    strip-tags(str) :=
      Nokogiri::XML::DocumentFragment parse(str) tap (x):
        x traverse (node):
          when(node is-a?(Nokogiri::XML::Element)):
            node replace(
              Nokogiri::XML::Text new(
                node inner-html
                node document
              )
            )

    sanitize(str) :=
      strip-tags(str) to-html
        gsub(r{[A-Z.]}, ".\\0")
        gsub(r{[^[:alnum:]_\-:.]}, "_")
